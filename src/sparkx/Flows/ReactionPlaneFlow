from FlowInterface import FlowInterface

class ReactionPlaneFlow(FlowInterface):
    def __init__(self,n=None):
        if n == None:
            warnings.warn("No 'n' for the flow harmonic given, default set to 2")
            self.n = 2
        elif not isinstance(n, int):
            raise TypeError('n has to be int')
        elif n <= 0:
            raise ValueError('n-th harmonic with value n<=0 can not be computed')
        else:
            self.n = n

        return

    def integrated_flow(self, particle_data):
        flow_event_average = 0. + 0.j
        number_particles = 0.
        for event in range(len(particle_data)):
            flow_event = 0. + 0.j
            for particle in range(len(particle_data[event])):
                pt = particle_data[event][particle].pt_abs()
                phi = particle_data[event][particle].phi()
                flow_event += pt**self.n * np.exp(1j*self.n*phi) / pt**self.n
                number_particles += 1.
            if number_particles != 0.:
                flow_event_average += flow_event
            else:
                flow_event_average = 0. + 0.j
        flow_event_average /= number_particles
        return flow_event_average

    def differential_flow(self,particle_data,bins,flow_as_function_of):
        #TODO implement as a common function in separate class?
        """
        Compute the differential anisotropic flow.

        Parameters
        ----------
        particle_data: list
            List with lists for each event containing Particle objects.
        bins: list
            List with bin boundaries for the differential quantity.
        flow_as_function_of: string
            Differential variable: 'pt', 'rapidity', 'pseudorapidity'.

        Returns
        -------
        `integrated_flow_`: list
            List containing the differential flow.
        """
        if not isinstance(bins, (list,np.ndarray)):
            raise TypeError('bins has to be list or np.ndarray')
        if not isinstance(flow_as_function_of, str):
            raise TypeError('flow_as_function_of is not a string')
        if flow_as_function_of not in ["pt","rapidity","pseudorapidity"]:
            raise ValueError("flow_as_function_of must be either 'pt', 'rapidity', 'pseudorapidity'")
        
        particles_bin = []
        for bin in range(len(bins)-1):
            events_bin = []
            for event in range(len(particle_data)):
                particles_event = []
                for particle in particle_data[event]:                
                    val = 0.
                    if flow_as_function_of == "pt":
                        val = particle.pt_abs()
                    if flow_as_function_of == "rapidity":
                        val = particle.momentum_rapidity_Y()
                    if flow_as_function_of == "pseudorapidity":
                        val = particle.pseudorapidity()
                        print(val)
                    if val >= bins[bin] and val < bins[bin+1]:
                        particles_event.append(particle)
                events_bin.extend([particles_event])
            particles_bin.extend([events_bin])

        self.__differential_flow_calculation(particles_bin)

    def __differential_flow_calculation(self, binned_particle_data):
        flow_differential = [0.+0.j for i in range(len(binned_particle_data))]
        for bin in range(len(binned_particle_data)):
            number_particles = 0.
            flow_event_average = 0. + 0.j
            for event in range(len(binned_particle_data[bin])):
                flow_event = 0. + 0.j
                for particle in range(len(binned_particle_data[bin][event])):
                    pt = binned_particle_data[bin][event][particle].pt_abs()
                    phi = binned_particle_data[bin][event][particle].phi()
                    flow_event += pt**self.n * np.exp(1j*self.n*phi) / pt**self.n
                    number_particles += 1.
                flow_event_average += flow_event
            if number_particles != 0.:
                flow_event_average /= number_particles
            else:
                flow_event_average = 0. + 0.j
            flow_differential[bin] = flow_event_average
        return flow_differential
